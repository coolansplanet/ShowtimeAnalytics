{"version":3,"sources":["reducers/index.js","reducers/moviesReducer.js","store.js","actions/moviesActions.js","components/MovieItemDetails/MovieItemDetails.js","components/MovieListItem/MovieListItem.js","components/App.js","serviceWorker.js","index.js"],"names":["combineReducers","movies","state","arguments","length","undefined","selectedMovie","data","fetchingState","error","showCompanyLogos","action","type","Object","objectSpread","payload","results","map","oneMovie","show","showPoster","showMovie","id","movieIndex","findIndex","toConsumableArray","middleware","applyMiddleware","promise","createLogger","createStore","reducer","compose","window","__REDUX_DEVTOOLS_EXTENSION__","baseUrl","apiKey","MovieItemDetails","this","props","fetchMovieDetails","genres","companyNames","companyImages","productionCompanies","movieDetails","production_companies","oneGenre","name","join","oneCompany","filter","logo_path","react_default","a","createElement","key","src","alt","react_transition_group","in","appear","timeout","classNames","className","overview","Component","connect","dispatch","movieId","movieEndpoint","axios","get","params","api_key","showMoviePoster","imagesBaseUrl","concat","movie","buttonText","poster_path","onLoad","bind","title","moment","release_date","format","vote_average","onClick","components_MovieItemDetails_MovieItemDetails","App","fetchMovies","popularMovies","onePopularMovie","components_MovieListItem_MovieListItem","sort_by","Boolean","location","hostname","match","ReactDOM","render","es","store","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f64c1a5.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport movies from './moviesReducer';\n\nexport default combineReducers({\n    movies\n});\n/*\n    I know combining reducers looks innecesary at this stage,\n    but could be necessary  if the project start growing.\n*/\n","export default function reducer(state={\n        movies:[],\n        selectedMovie: {\n            data: {},\n            fetchingState: null,\n            error: null,\n            showCompanyLogos: false\n        },\n        fetchingState: null,\n        error: null\n    }, action){\n\n    if(action.type === 'FETCH_MOVIES_PENDING'){\n\n        return {...state, fetchingState: 'fetching', error: null}\n\n    }else if(action.type === 'FETCH_MOVIES_PENDING'){\n\n        return {...state, fetchingState: 'fetching', error: null}\n\n    }else if(action.type === 'FETCH_MOVIES_FULFILLED'){\n\n        const movies = action.payload.data.results;\n        return {\n            ...state,\n            fetchingState: 'fetched',\n            movies: movies.map(oneMovie => {\n                return {\n                    ...oneMovie,\n                    show: false,\n                    error: null,\n                    showPoster: false\n                }\n            })\n        }\n    }else if(action.type === 'FETCH_MOVIES_REJECTED'){\n\n        return {\n            ...state,\n            fetchingState: 'error',\n            error: action.payload\n        }\n    }else if(action.type === 'SHOW_MOVIE'){\n\n        return {\n            ...state,\n            movies: state.movies.map(oneMovie => {\n                let showMovie = oneMovie.id === action.payload && !oneMovie.show;\n                return {...oneMovie, show: showMovie}\n            })\n        }\n    }else if(action.type === 'SHOW_MOVIE_POSTER'){\n\n        let movieIndex =  state.movies.findIndex(oneMovie => {\n            return oneMovie.id === action.payload;\n        });\n        const movies = [...state.movies];\n        movies[movieIndex].showPoster = true;\n        return {...state, movies: movies}\n\n    }else if(action.type === 'FETCH_MOVIE_DETAILS_PENDING'){\n        return {...state, selectedMovie: {\n                fetchingState: 'fetching',\n                data: {},\n                error: null\n            }\n        }\n    }else if(action.type === 'FETCH_MOVIE_DETAILS_FULFILLED'){\n        return {\n                ...state,\n                selectedMovie: {\n                    fetchingState: 'fetched',\n                    data: action.payload.data,\n                    error: null\n                }\n        }\n    }else if(action.type === 'FETCH_MOVIE_DETAILS_REJECTED'){\n\n        return {...state, selectedMovie: {\n                fetchingState: 'error',\n                error: action.payload\n            }\n        }\n    }else{\n        return state;\n    }\n}\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport promise from \"redux-promise-middleware\";\nimport reducer from './reducers';\n\nconst middleware = applyMiddleware(promise(), createLogger());\n\n//export default createStore(reducer, middleware);\n\nexport default createStore(\n    reducer,\n    compose(\n        middleware,\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n","import axios from 'axios';\n\nlet baseUrl = 'https://api.themoviedb.org/3/';\nlet apiKey = '4a203abe54a397a3160c4eb42e275f70';\n\nexport function fetchMovies(){\n    let movieListEndpoint = 'discover/movie';\n    return {\n        type: 'FETCH_MOVIES',\n        payload: axios.get(baseUrl+movieListEndpoint, {\n                 params: {\n                     api_key: apiKey,\n                     sort_by: 'popularity.desc'\n                 }\n        })\n    }\n}\n\nexport function showMovie(movieId){\n    return {\n        type: 'SHOW_MOVIE',\n        payload: movieId\n    }\n}\n\n\nexport function showMoviePoster(movieId){\n    return {\n        type: 'SHOW_MOVIE_POSTER',\n        payload: movieId\n    }\n}\n\nexport function fetchMovieDetails(movieId){\n    let movieEndpoint = 'movie/'+movieId;\n    return {\n        type: 'FETCH_MOVIE_DETAILS',\n        payload: axios.get(baseUrl+movieEndpoint, {\n            params: {\n                api_key: apiKey,\n            }\n        })\n    }\n}\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { fetchMovieDetails } from '../../actions/moviesActions';\n\nclass MovieItemDetails extends Component{\n\n    componentWillMount(){\n        this.props.fetchMovieDetails(this.props.id);\n    }\n\n    render(){\n        let genres;\n        let productionCompanies = this.props.movieDetails.production_companies;\n        let companyNames;\n        let companyImages;\n\n        if (!!this.props.movieDetails.genres) {\n            genres = this.props.movieDetails.genres.map(\n                oneGenre => {\n                    return oneGenre.name;\n                }\n            ).join(', ');\n        }else{\n            genres = 'Unknown';\n        }\n\n        if(!!productionCompanies){\n            let imagesBaseUrl = 'https://image.tmdb.org/t/p/original';\n\n            companyNames = productionCompanies.map(\n                oneCompany => { return oneCompany.name }\n            ).join(', ');\n\n            let companiesWithImages = productionCompanies.filter(\n                oneCompany => { return !!oneCompany.logo_path }\n            );\n\n            companyImages = companiesWithImages.map(\n                oneCompany => {\n                    return(\n                        <li key={oneCompany.id}>\n                            <img src={imagesBaseUrl+oneCompany.logo_path}\n                                 alt={oneCompany.name}\n                            />\n                        </li>\n                    )\n                }\n            );\n        }\n        return(\n            <CSSTransition\n                in={true}\n                appear={true}\n                timeout={300}\n                classNames=\"details\">\n\n                <div className=\"movie-item-details\">\n                    <p className=\"overview\">{this.props.movieDetails.overview}</p>\n                    <p className=\"genres\">\n                        <span className=\"bold\">Genre: </span>\n                        {genres}\n                    </p>\n\n                    {companyNames ? <p className=\"production-companies\">\n                        <span className=\"bold\">Production Companies: </span>\n                        {companyNames}\n                    </p> : ''}\n\n                    {companyImages ? <ul className=\"production-companies\">\n                        {companyImages}\n                    </ul> : ''}\n                </div>\n            </CSSTransition>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        movieDetails: state.movies.selectedMovie.data\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchMovieDetails: movieId => {\n            dispatch(fetchMovieDetails(movieId))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieItemDetails);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { showMovie, showMoviePoster } from '../../actions/moviesActions';\nimport MovieItemDetails from '../MovieItemDetails/MovieItemDetails';\nimport moment from 'moment';\n\nconst MovieListItem = props => {\n    let imageWidth = 300;\n    let imagesBaseUrl = `https://image.tmdb.org/t/p/w${imageWidth}`;\n    let className = props.movie.show ? 'show-details' : '';\n    let buttonText = props.movie.show ? 'Close' : 'Info';\n\n    return (\n        <li className={className + ' movie-list-item'}>\n            <img src={imagesBaseUrl+props.movie.poster_path}\n                 alt=\"Poster\"\n                 onLoad={props.showMoviePoster.bind({}, props.movie.id)}\n                 className={props.movie.showPoster ? 'show' : ''}/>\n            <h3 className=\"title\">{props.movie.title}</h3>\n            <p className=\"release-date\">\n                <i className=\"material-icons\">today</i>\n                {\n                    moment(props.movie.release_date, \"YYYY-MM-DD\")\n                     .format('LL')\n                }\n            </p>\n\n            <h3 className=\"vote-average\">{props.movie.vote_average}</h3>\n            <button onClick={props.showMovie.bind({}, props.movie.id)}>\n                {buttonText}\n            </button>\n\n            {props.movie.show ? <MovieItemDetails id={props.movie.id} /> : ''}\n        </li>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        showMovie: movieId => {\n            dispatch(showMovie(movieId))\n        },\n        showMoviePoster: movieId => {\n            dispatch(showMoviePoster(movieId))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieListItem);\n","import React, { Component } from 'react';\nimport MovieListItem from './MovieListItem/MovieListItem';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/moviesActions';\n\n\nclass App extends Component {\n\n    componentWillMount(){\n      this.props.fetchMovies();\n    }\n\n    render() {\n        let popularMovies = this.props.movies;\n        return (\n            <section id=\"home\">\n                <h1>Top most popular <span className=\"highlighted\">\n                        {this.props.movies.length} movies\n                    </span>\n                </h1>\n                <ul className=\"movie-list\">{\n                        popularMovies.map(onePopularMovie => {\n                            return (\n                                <MovieListItem\n                                    key={onePopularMovie.id}\n                                    movie={onePopularMovie}\n                                />\n                        )})\n                    }\n                </ul>\n            </section>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        movies: state.movies.movies\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchMovies: () => {\n            dispatch(fetchMovies())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}